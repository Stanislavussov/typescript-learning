{"version":3,"sources":["p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h5/pages/Bars.svg","p2-homeworks/h5/Header.module.css","p2-homeworks/h5/pages/Menu.tsx","p2-homeworks/h5/Header.tsx","p2-homeworks/h5/pages/Error404.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h6/common/c4-SuperEditableSpan/SuperEditableSpan.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h6/localStorage/localStorage.ts","p2-homeworks/h6/HW6.tsx","p2-homeworks/h5/pages/PreJunior.tsx","p2-homeworks/h5/pages/Junior.tsx","p2-homeworks/h5/pages/JuniorPlus.tsx","p2-homeworks/h5/Routes.tsx","p2-homeworks/h5/HW5.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css"],"names":["module","exports","Menu","menuStatus","menuStatusHandler","className","s","header","onClick","style","width","margin","src","Bars","alt","to","activeClassName","Header","useState","setMenuStatus","Error404","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperEditableSpan","autoFocus","onBlur","spanProps","editMode","children","onDoubleClick","restSpanProps","SuperButton","red","finalClassName","default","saveState","state","stateAsString","JSON","stringify","localStorage","setItem","x","y","defaultState","getItem","parse","restoreState","HW6","setValue","undefined","PreJunior","Junior","JuniorPlus","PATH","Routes","path","exact","render","component","HW5","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c183402.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2APui\",\"red\":\"SuperButton_red__eGPyv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2JzxO\"};","module.exports = __webpack_public_path__ + \"static/media/Bars.cb1e08e4.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__20QYw\"};","import React, {useState} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Bars from './Bars.svg'\r\nimport s from \"../Header.module.css\";\r\n\r\ntype MenuProps = {\r\n    menuStatus: boolean\r\n    menuStatusHandler: (menuStatus: boolean) => void\r\n}\r\n\r\nexport const Menu: React.FC<MenuProps> = ({menuStatus, menuStatusHandler}) => {\r\n\r\n        const imgStyle = {\r\n            width: 30,\r\n            margin: 20\r\n        }\r\n\r\n        return (\r\n            <div className={s.header}>\r\n                <img onClick={() => menuStatusHandler(!menuStatus)} style={imgStyle} src={Bars} alt=\"\"/>\r\n                {menuStatus &&\r\n                <ul>\r\n                    <li><NavLink to=\"/pre-junior\" activeClassName=\"selected\">PRE JUNIOR</NavLink></li>\r\n                    <li><NavLink to=\"/junior\" activeClassName=\"selected\">JUNIOR</NavLink></li>\r\n                    <li><NavLink to=\"/junior-plus\" activeClassName=\"selected\">JUNIOR PLUS</NavLink></li>\r\n                </ul>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Menu;\r\n","import React, {useState} from \"react\";\r\nimport s from './Header.module.css'\r\nimport Menu from \"./pages/Menu\";\r\n\r\nfunction Header() {\r\n\r\n    const [menuStatus, setMenuStatus] = useState(false)\r\n\r\n    const menuStatusHandler = (menuStatus: boolean) => {\r\n        setMenuStatus(menuStatus)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <Menu menuStatus={menuStatus} menuStatusHandler={menuStatusHandler} />\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div>\r\n            <div>404</div>\r\n            <div>Page not found!</div>\r\n            <div>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} `; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            {error\r\n                ? <span className={finalSpanClassName}>{error}</span>\r\n                : <span>Success</span>\r\n            }\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from \"react\";\r\nimport SuperInputText from \"../../../h4/common/c1-SuperInputText/SuperInputText\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n// тип пропсов обычного спана\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n\r\n    spanProps?: DefaultSpanPropsType // пропсы для спана\r\n};\r\n\r\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\r\n    {\r\n        autoFocus, // игнорировать изменение этого пропса\r\n        onBlur,\r\n        onEnter,\r\n        spanProps,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {};\r\n\r\n    const onEnterCallback = () => {\r\n        // setEditMode(); // выключить editMode при нажатии Enter\r\n\r\n        onEnter && onEnter();\r\n    };\r\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        // setEditMode(); // выключить editMode при нажатии за пределами инпута\r\n\r\n        onBlur && onBlur(e);\r\n    };\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        // setEditMode(); // включить editMode при двойном клике\r\n\r\n        onDoubleClick && onDoubleClick(e);\r\n    };\r\n\r\n    const spanClassName = `${\"сделать красивый стиль для спана\"} ${className}`;\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ? (\r\n                    <SuperInputText\r\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\r\n                        onBlur={onBlurCallback}\r\n                        onEnter={onEnterCallback}\r\n\r\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n                    />\r\n                ) : (\r\n                    <span\r\n                        onDoubleClick={onDoubleClickCallBack}\r\n                        className={spanClassName}\r\n\r\n                        {...restSpanProps}\r\n                    >\r\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\r\n                        {children || restProps.value}\r\n                    </span>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperEditableSpan;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","// вот вам функция для сохранения объектов в память браузера\r\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\r\nexport function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------------------------------\r\n// использование:\r\ntype StateType = {\r\n    x: string\r\n    y: number\r\n}\r\n\r\n// сохраняем объект типа StateType в ячейке \"test\"\r\nsaveState<StateType>(\"test\", {x: \"A\", y: 1});\r\n\r\n// получем в переменную state объект из ячейки \"test\" или дэфолтный объект если ячейка пуста\r\nconst state: StateType = restoreState<StateType>(\"test\", {x: \"\", y: 0});\r\n","import React, {useState} from \"react\";\r\nimport SuperEditableSpan from \"./common/c4-SuperEditableSpan/SuperEditableSpan\";\r\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\r\nimport {restoreState, saveState} from \"./localStorage/localStorage\";\r\n\r\nfunction HW6() {\r\n    const [value, setValue] = useState<string>(\"\");\r\n\r\n    const save = () => {\r\n        saveState<string>(\"editable-span-value\", value);\r\n    };\r\n    const restore = () => {\r\n        // setValue();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 6\r\n\r\n            {/*should work (должно работать)*/}\r\n            <div>\r\n                <SuperEditableSpan\r\n                    value={value}\r\n                    onChangeText={setValue}\r\n                    spanProps={{children: value ? undefined : \"enter text...\"}}\r\n                />\r\n            </div>\r\n            <SuperButton onClick={save}>save</SuperButton>\r\n            <SuperButton onClick={restore}>restore</SuperButton>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperEditableSpan/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW6;\r\n","import React from \"react\";\r\nimport HW1 from \"../../h1/HW1\";\r\nimport HW2 from \"../../h2/HW2\";\r\nimport HW3 from \"../../h3/HW3\";\r\nimport HW4 from \"../../h4/HW4\";\r\nimport HW6 from \"../../h6/HW6\";\r\n\r\nfunction PreJunior() {\r\n    return (\r\n        <div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            <HW6/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PreJunior;\r\n\r\n// сделайте по аналогии пустые страницы джун и джун+\r\n// туда будут добавляться следующие дз","import React from 'react';\r\n\r\nconst Junior = () => {\r\n    return (\r\n        <div>\r\n            Junior\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Junior;\r\n","import React from 'react';\r\n\r\nconst JuniorPlus = () => {\r\n    return (\r\n        <div>\r\n            Junior+\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JuniorPlus;\r\n","import React from \"react\";\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport Error404 from \"./pages/Error404\";\r\nimport PreJunior from \"./pages/PreJunior\";\r\nimport Junior from \"./pages/Junior\";\r\nimport JuniorPlus from \"./pages/JuniorPlus\";\r\n\r\nexport const PATH = {\r\n    PRE_JUNIOR: \"/pre-junior\",\r\n    JUNIOR: \"/junior\",\r\n    JUNIOR_PLUS: \"/junior-plus\"\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            {/*Switch выбирает первый подходящий роут*/}\r\n            <Switch>\r\n                {/*в начале мы попадаем на страницу \"/\" и переходим сразу на страницу PRE_JUNIOR*/}\r\n                {/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PRE_JUNIOR}/>}/>\r\n\r\n                <Route path={PATH.PRE_JUNIOR} component={PreJunior}/>\r\n                <Route path={PATH.JUNIOR} render={() => <Junior/>}/>\r\n                <Route path={PATH.JUNIOR_PLUS} render={() => <JuniorPlus/>}/>\r\n\r\n                {/*// add routes*/}\r\n\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                <Route path=\"*\" render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Routes from \"./Routes\";\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\nfunction HW5() {\r\n    return (\r\n        <div>\r\n            {/*в gh-pages лучше работает HashRouter*/}\r\n            <HashRouter>\r\n                <Header/>\r\n                <Routes/>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW5;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\"\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\"\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\"\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\nimport HW5 from \"../../../p2-homeworks/h5/HW5\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className={s.App}>\r\n            {/*<HW1 />*/}\r\n            {/*<HW2 />*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4 />*/}\r\n            <HW5/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1SEMF\",\"errorInput\":\"SuperInputText_errorInput__3Lvhf\",\"error\":\"SuperInputText_error__1P3xf\"};"],"sourceRoot":""}